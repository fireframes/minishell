0. extract envvar into array

1. main loop running

[ todo ]:
◦ make absolute and relative paths working
◦ leaks when executing only one builtin (no pipes)

[ wip ]:
◦ test with std syst cmds (ls / grep / wc / cat / etc..)
◦ be sure there is no leaks on all use cases

[ implemented ] (needs adjustments/tests/error_check):
◦ fork to execve
◦ multipiping {array of fds, }
◦ avoid some segfault and double free in certain cases


2. implement subject built-ins (8 funcs)

[ todo ]:
◦ export with no options
◦ unset with no options

[ wip ]:
◦ exit with no options


[ implemented ] (needs adjustments/tests/error_check):
◦ echo with option -n

◦ cd with only a relative or absolute path  -->

!!! cd and possibly other builtins should work in the end of pipes

◦ pwd with no options
◦ env with no options or arguments

[ done ]:
...

3. lexer-parser-expander

3.5 redirections

4. heredoc

5. signals

6. history, view and UX
	- clear command history
	- add current dir view as prompt
	- colors ?

7. commands should be searched and TAB-autocompleted

8. check function scopes. limit locals with static





----
can be added to checker module for ft_cd

// static bool	isvalidpath(char *path)
// {
// 	(void) path;
// 	// if (path[0] == '.')
// 		// return (true);
// 	// else if (path[0] == '/')
// 		// return (true);
// 	// return (false);
// 	return (true);
// }

// UPDATE PWD ENV VAR AFTER CD
/*
char	curpath[PATH_MAX + 1];

	if (getcwd(curpath, sizeof(curpath)) == NULL)
	{
		perror("pwd: getcwd() error");
		return (1);
	}
	char *new_pwd = ft_strjoin("PWD=", curpath);
	printf("NEW: new_pwd: %s\n", new_pwd);
	char **env_ptr = env_exists("PWD", envp);
	printf("ENVP: %s\n", *env_ptr);
	if (env_ptr != NULL && ft_strchr("PWD", '='))
		update_envp(new_pwd, env_ptr);
	else if (!env_ptr)
		add_env(new_pwd, envp);
	free(new_pwd);
	return (0);
*/
